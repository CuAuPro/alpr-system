/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/signin": {
    /** Sign in a user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SigninRequest"];
        };
      };
      responses: {
        /** @description Successful login */
        200: {
          content: {
            "application/json": components["schemas"]["SigninResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/auth/signup": {
    /** Register a new user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SignupRequest"];
        };
      };
      responses: {
        /** @description User created */
        201: {
          content: {
            "application/json": components["schemas"]["SignupResponse"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
  };
  "/auth/change-password": {
    /** Change user password */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChangePasswordRequest"];
        };
      };
      responses: {
        /** @description Password change successful */
        200: {
          content: {
            "application/json": components["schemas"]["ChangePasswordResponse"];
          };
        };
        /** @description Invalid input or password */
        400: {
          content: never;
        };
      };
    };
  };
  "/api/healthcheck": {
    /**
     * Health Check
     * @description Responds if the app is up and running
     */
    get: {
      responses: {
        /** @description App is up and running */
        200: {
          content: never;
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
  };
  "/api/license-plates": {
    /**
     * Get all valid license plates
     * @description Retrieve a list of all valid license plates
     */
    get: {
      responses: {
        /** @description A list of license plates */
        200: {
          content: {
            "application/json": components["schemas"]["LicensePlateResponse"][];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
    /** Add a new license plate */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LicensePlateRequest"];
        };
      };
      responses: {
        /** @description License plate created */
        201: {
          content: {
            "application/json": components["schemas"]["LicensePlateCreateResponse"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
  };
  "/api/license-plates/{licensePlateId}": {
    /** Modify an existing license plate */
    put: {
      parameters: {
        path: {
          /** @description ID of the license plate to delete */
          licensePlateId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LicensePlateRequest"];
        };
      };
      responses: {
        /** @description License plate updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
        /** @description License plate not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a license plate by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the license plate to delete */
          licensePlateId: string;
        };
      };
      responses: {
        /** @description License plate deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
        /** @description License plate not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/license-plates/archive": {
    /**
     * Get archive license plates
     * @description Retrieve a list of all archived license plates
     */
    get: {
      responses: {
        /** @description A list of license plates */
        200: {
          content: {
            "application/json": components["schemas"]["LicensePlateResponse"][];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
    /**
     * Archive expired license plates
     * @description Move expired license plates to the archive
     */
    post: {
      responses: {
        /** @description License plates archived */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SigninRequest: {
      /** @example johndoe */
      username: string;
      /** @example password123 */
      password: string;
    };
    SigninResponse: {
      /** @example User signed in successfully */
      message?: string;
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
      token?: string;
      /** @example johndoe */
      username?: string;
      /** @example John */
      firstName?: string;
      /** @example Doe */
      lastName?: string;
      /** @example user */
      role?: string;
    };
    SignupRequest: {
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      /** @example johndoe */
      username: string;
      /** @example password123 */
      password: string;
    };
    SignupResponse: {
      /** @example User created successfully */
      message?: string;
      /** @example 12345 */
      userId?: string;
    };
    ChangePasswordRequest: {
      /** @example johndoe */
      username: string;
      /** @example oldpassword123 */
      oldPassword: string;
      /** @example newpassword123 */
      newPassword: string;
    };
    ChangePasswordResponse: {
      /** @example Password changed successfully */
      message?: string;
    };
    LicensePlateResponse: {
      /**
       * Format: uuid
       * @example 550e8400-e29b-41d4-a716-446655440000
       */
      id?: string;
      /** @example ABC1234 */
      licensePlate?: string;
      /**
       * Format: date
       * @example 2024-01-01
       */
      validFrom?: string;
      /**
       * Format: date
       * @example 2025-01-01
       */
      validTo?: string;
    };
    LicensePlateRequest: {
      /** @example ABC1234 */
      licensePlate: string;
      /**
       * Format: date
       * @example 2024-01-01
       */
      validFrom: string;
      /**
       * Format: date
       * @example 2025-01-01
       */
      validTo: string;
    };
    LicensePlateCreateResponse: {
      /**
       * Format: uuid
       * @example 550e8400-e29b-41d4-a716-446655440000
       */
      id?: string;
      /** @example License plate created successfully */
      message?: string;
    };
    MessageResponse: {
      /** @example Operation successful */
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
