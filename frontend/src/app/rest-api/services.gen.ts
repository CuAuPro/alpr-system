// This file is auto-generated by @hey-api/openapi-ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostAuthSigninData, PostAuthSigninResponse, PostAuthSignupData, PostAuthSignupResponse, PostAuthChangePasswordData, PostAuthChangePasswordResponse, GetApiHealthcheckResponse, GetApiLicensePlatesResponse, PostApiLicensePlatesData, PostApiLicensePlatesResponse, PutApiLicensePlatesByLicensePlateIdData, PutApiLicensePlatesByLicensePlateIdResponse, DeleteApiLicensePlatesByLicensePlateIdData, DeleteApiLicensePlatesByLicensePlateIdResponse, PostApiLicensePlatesArchiveResponse, GetApiLicensePlatesArchiveResponse } from './types.gen';

@Injectable({
    providedIn: 'root'
})
export class AuthenticationService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * Sign in a user
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SigninResponse Successful login
     * @throws ApiError
     */
    public postAuthSignin(data: PostAuthSigninData): Observable<PostAuthSigninResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/auth/signin',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Register a new user
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SignupResponse User created
     * @throws ApiError
     */
    public postAuthSignup(data: PostAuthSignupData): Observable<PostAuthSignupResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/auth/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
    /**
     * Change user password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChangePasswordResponse Password change successful
     * @throws ApiError
     */
    public postAuthChangePassword(data: PostAuthChangePasswordData): Observable<PostAuthChangePasswordResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/auth/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input or password'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class HealthcheckService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * Health Check
     * Responds if the app is up and running
     * @returns unknown App is up and running
     * @throws ApiError
     */
    public getApiHealthcheck(): Observable<GetApiHealthcheckResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/healthcheck',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class LicensePlatesService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * Get all valid license plates
     * Retrieve a list of all valid license plates
     * @returns LicensePlateResponse A list of license plates
     * @throws ApiError
     */
    public getApiLicensePlates(): Observable<GetApiLicensePlatesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/license-plates',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
    /**
     * Add a new license plate
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LicensePlateCreateResponse License plate created
     * @throws ApiError
     */
    public postApiLicensePlates(data: PostApiLicensePlatesData): Observable<PostApiLicensePlatesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/license-plates',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
    /**
     * Modify an existing license plate
     * @param data The data for the request.
     * @param data.licensePlateId ID of the license plate to delete
     * @param data.requestBody
     * @returns MessageResponse License plate updated
     * @throws ApiError
     */
    public putApiLicensePlatesByLicensePlateId(data: PutApiLicensePlatesByLicensePlateIdData): Observable<PutApiLicensePlatesByLicensePlateIdResponse> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/license-plates/{licensePlateId}',
            path: {
                licensePlateId: data.licensePlateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input',
                404: 'License plate not found'
            }
        });
    }
    
    /**
     * Delete a license plate by ID
     * @param data The data for the request.
     * @param data.licensePlateId ID of the license plate to delete
     * @returns MessageResponse License plate deleted
     * @throws ApiError
     */
    public deleteApiLicensePlatesByLicensePlateId(data: DeleteApiLicensePlatesByLicensePlateIdData): Observable<DeleteApiLicensePlatesByLicensePlateIdResponse> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/license-plates/{licensePlateId}',
            path: {
                licensePlateId: data.licensePlateId
            },
            errors: {
                400: 'Invalid input',
                404: 'License plate not found'
            }
        });
    }
    
    /**
     * Archive expired license plates
     * Move expired license plates to the archive
     * @returns MessageResponse License plates archived
     * @throws ApiError
     */
    public postApiLicensePlatesArchive(): Observable<PostApiLicensePlatesArchiveResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/license-plates/archive',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
    /**
     * Get archive license plates
     * Retrieve a list of all archived license plates
     * @returns LicensePlateResponse A list of license plates
     * @throws ApiError
     */
    public getApiLicensePlatesArchive(): Observable<GetApiLicensePlatesArchiveResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/license-plates/archive',
            errors: {
                400: 'Invalid input'
            }
        });
    }
    
}